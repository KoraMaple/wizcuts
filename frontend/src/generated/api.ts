/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/health': {
    /** Basic service health check */
    get: operations['HealthController_get_v1'];
  };
  '/api/v1/barbers': {
    /** Get all active barbers */
    get: operations['BarberController_findAll_v1'];
    /** Create a new barber */
    post: operations['BarberController_create_v1'];
  };
  '/api/v1/barbers/available': {
    /** Get barbers available on a specific date */
    get: operations['BarberController_findAvailable_v1'];
  };
  '/api/v1/barbers/{id}': {
    /** Get a barber by ID */
    get: operations['BarberController_findOne_v1'];
    /** Delete a barber */
    delete: operations['BarberController_remove_v1'];
    /** Update a barber */
    patch: operations['BarberController_update_v1'];
  };
  '/api/v1/barbers/{id}/details': {
    /** Get barber with related data (bookings, availability) */
    get: operations['BarberController_findOneWithRelations_v1'];
  };
  '/api/v1/bookings': {
    /** Get all bookings */
    get: operations['BookingController_findAll_v1'];
    /** Create a new booking */
    post: operations['BookingController_create_v1'];
  };
  '/api/v1/bookings/user/appointments': {
    /** Get current user appointments */
    get: operations['BookingController_getUserAppointments_v1'];
  };
  '/api/v1/bookings/{id}': {
    /** Get a booking by id */
    get: operations['BookingController_findOne_v1'];
    /** Delete a booking */
    delete: operations['BookingController_remove_v1'];
    /** Update a booking */
    patch: operations['BookingController_update_v1'];
  };
  '/api/v1/bookings/{id}/confirm': {
    /** Confirm a pending booking */
    post: operations['BookingController_confirm_v1'];
  };
  '/api/v1/bookings/{id}/cancel': {
    /** Cancel a booking */
    post: operations['BookingController_cancel_v1'];
  };
  '/api/v1/services': {
    /** List available grooming services */
    get: operations['ServicesController_list_v1'];
  };
  '/api/v1': {
    get: operations['AppController_getHello_v1'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CreateBarberDto: {
      /**
       * @description Barber name
       * @example Michael Rodriguez
       */
      name: string;
      /**
       * @description Barber title
       * @example Master Barber
       */
      title: string;
      /**
       * @description Barber biography
       * @example Experienced barber with 10+ years in the industry
       */
      bio: string;
      /**
       * @description Barber profile image URL
       * @example /images/barber1.jpg
       */
      image: string;
      /**
       * @description Years of experience
       * @example 10
       */
      experienceYears?: number;
      /**
       * @description Barber specialties
       * @example [
       *   "Classic Cuts",
       *   "Beard Styling"
       * ]
       */
      specialties?: string[];
      /**
       * @description Phone number
       * @example +1234567890
       */
      phone?: string;
      /**
       * @description Email address
       * @example michael@wizcuts.com
       */
      email?: string;
    };
    UpdateBarberDto: {
      /**
       * @description Barber name
       * @example Michael Rodriguez
       */
      name?: string;
      /**
       * @description Barber title
       * @example Senior Barber
       */
      title?: string;
      /** @description Barber biography */
      bio?: string;
      /** @description Barber profile image URL */
      image?: string;
      /** @description Years of experience */
      experienceYears?: number;
      /** @description Barber specialties */
      specialties?: string[];
      /** @description Active status */
      isActive?: boolean;
      /** @description Phone number */
      phone?: string;
      /** @description Email address */
      email?: string;
      /** @description Rating */
      rating?: string;
      /** @description Review count */
      reviewCount?: number;
    };
    CreateBookingDto: {
      /**
       * @description Barber ID
       * @example 1
       */
      barberId: number;
      /**
       * @description Customer name
       * @example John Smith
       */
      customerName: string;
      /**
       * @description Customer email
       * @example john@example.com
       */
      customerEmail: string;
      /**
       * @description Customer phone
       * @example +1234567890
       */
      customerPhone: string;
      /**
       * @description Service name
       * @example Classic Haircut
       */
      serviceName: string;
      /**
       * @description Total price
       * @example 35.00
       */
      totalPrice: string;
      /**
       * @description Duration in minutes
       * @example 45
       */
      durationMinutes: number;
      /**
       * @description Appointment date and time
       * @example 2024-01-15T10:00:00Z
       */
      appointmentDateTime: string;
      /**
       * @description Additional notes
       * @example Customer prefers short sides
       */
      notes?: string;
    };
    UpdateBookingDto: {
      /** @description Booking status */
      status?: string;
      /** @description Appointment date and time */
      appointmentDateTime?: string;
      /** @description Additional notes */
      notes?: string;
    };
    ServiceDto: {
      /** @example 1 */
      id: number;
      /** @example Classic Cut */
      name: string;
      /** @example Precision haircut tailored to you */
      description: string;
      /**
       * @description Base price as string decimal
       * @example 30.00
       */
      basePrice: string;
      /** @example 30 */
      durationMinutes: number;
      /** @example haircut */
      category: string;
      /** @example true */
      isActive: boolean;
      /** @example https://example.com/images/classic-cut.jpg */
      image?: Record<string, never>;
      /** @example 2025-08-20T20:00:00.000Z */
      createdAt: string;
      /** @example 2025-08-20T20:00:00.000Z */
      updatedAt: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Basic service health check */
  HealthController_get_v1: {
    responses: {
      /** @description Service is healthy */
      200: {
        content: {
          'application/json': unknown;
        };
      };
    };
  };
  /** Get all active barbers */
  BarberController_findAll_v1: {
    responses: {
      /** @description List of all active barbers */
      200: {
        content: never;
      };
    };
  };
  /** Create a new barber */
  BarberController_create_v1: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateBarberDto'];
      };
    };
    responses: {
      /** @description Barber created successfully */
      201: {
        content: never;
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
    };
  };
  /** Get barbers available on a specific date */
  BarberController_findAvailable_v1: {
    parameters: {
      query: {
        date: string;
      };
    };
    responses: {
      /** @description List of available barbers */
      200: {
        content: never;
      };
    };
  };
  /** Get a barber by ID */
  BarberController_findOne_v1: {
    parameters: {
      path: {
        /** @description Barber ID */
        id: number;
      };
    };
    responses: {
      /** @description Barber details */
      200: {
        content: never;
      };
      /** @description Barber not found */
      404: {
        content: never;
      };
    };
  };
  /** Delete a barber */
  BarberController_remove_v1: {
    parameters: {
      path: {
        /** @description Barber ID */
        id: number;
      };
    };
    responses: {
      /** @description Barber deleted successfully */
      200: {
        content: never;
      };
    };
  };
  /** Update a barber */
  BarberController_update_v1: {
    parameters: {
      path: {
        /** @description Barber ID */
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateBarberDto'];
      };
    };
    responses: {
      /** @description Barber updated successfully */
      200: {
        content: never;
      };
    };
  };
  /** Get barber with related data (bookings, availability) */
  BarberController_findOneWithRelations_v1: {
    parameters: {
      path: {
        /** @description Barber ID */
        id: number;
      };
    };
    responses: {
      /** @description Barber with related data */
      200: {
        content: never;
      };
    };
  };
  /** Get all bookings */
  BookingController_findAll_v1: {
    parameters: {
      query?: {
        /** @description Filter by barber ID */
        barberId?: number;
        /** @description Filter by status */
        status?: 'pending' | 'confirmed' | 'completed' | 'cancelled';
        /** @description Start date for filtering */
        startDate?: string;
        /** @description End date for filtering */
        endDate?: string;
      };
    };
    responses: {
      /** @description Return all bookings. */
      200: {
        content: never;
      };
    };
  };
  /** Create a new booking */
  BookingController_create_v1: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateBookingDto'];
      };
    };
    responses: {
      /** @description The booking has been successfully created. */
      201: {
        content: never;
      };
      /** @description Bad Request. */
      400: {
        content: never;
      };
      /** @description Booking conflict. */
      409: {
        content: never;
      };
    };
  };
  /** Get current user appointments */
  BookingController_getUserAppointments_v1: {
    responses: {
      /** @description Return all appointments for the authenticated user. */
      200: {
        content: never;
      };
    };
  };
  /** Get a booking by id */
  BookingController_findOne_v1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Return the booking. */
      200: {
        content: never;
      };
      /** @description Booking not found. */
      404: {
        content: never;
      };
    };
  };
  /** Delete a booking */
  BookingController_remove_v1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description The booking has been successfully deleted. */
      200: {
        content: never;
      };
      /** @description Booking not found. */
      404: {
        content: never;
      };
    };
  };
  /** Update a booking */
  BookingController_update_v1: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateBookingDto'];
      };
    };
    responses: {
      /** @description The booking has been successfully updated. */
      200: {
        content: never;
      };
      /** @description Booking not found. */
      404: {
        content: never;
      };
    };
  };
  /** Confirm a pending booking */
  BookingController_confirm_v1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description The booking has been confirmed. */
      200: {
        content: never;
      };
      /** @description Booking not found. */
      404: {
        content: never;
      };
    };
  };
  /** Cancel a booking */
  BookingController_cancel_v1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description The booking has been cancelled. */
      200: {
        content: never;
      };
      /** @description Booking not found. */
      404: {
        content: never;
      };
    };
  };
  /** List available grooming services */
  ServicesController_list_v1: {
    responses: {
      /** @description Array of services */
      200: {
        content: {
          'application/json': components['schemas']['ServiceDto'][];
        };
      };
    };
  };
  AppController_getHello_v1: {
    responses: {
      200: {
        content: never;
      };
    };
  };
}
