name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'

jobs:
  frontend-test:
    name: Frontend Tests & Coverage
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install root dependencies
        run: npm ci
        working-directory: ./

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run typecheck

      - name: Run ESLint
        run: npm run lint

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Build application
        run: npm run build

      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ./frontend/coverage/
          retention-days: 1

  backend-test:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: wizcuts_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'

      - name: Install root dependencies
        run: npm ci
        working-directory: ./

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/wizcuts_test" >> .env.test
          echo "CLERK_SECRET_KEY=test_key_123" >> .env.test
          echo "SUPABASE_URL=http://localhost:54321" >> .env.test
          echo "SUPABASE_ANON_KEY=test_anon_key" >> .env.test
          echo "SUPABASE_SERVICE_ROLE_KEY=test_service_key" >> .env.test

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run build

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/wizcuts_test
          CLERK_SECRET_KEY: test_key
          JWT_SECRET: test_jwt_secret
          SUPABASE_URL: http://localhost:54321
          SUPABASE_ANON_KEY: test_anon_key
          SUPABASE_SERVICE_ROLE_KEY: test_service_key

      - name: Upload backend coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: ./backend/coverage/
          retention-days: 1

  # e2e-test:
  #   name: End-to-End Tests
  #   runs-on: ubuntu-latest
  #   needs: [frontend-test, backend-test]

  #   services:
  #     postgres:
  #       image: postgres:15
  #       env:
  #         POSTGRES_USER: test
  #         POSTGRES_PASSWORD: test
  #         POSTGRES_DB: wizcuts_test
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'npm'

  #     - name: Install backend dependencies
  #       working-directory: ./backend
  #       run: npm ci

  #     - name: Install frontend dependencies
  #       working-directory: ./frontend
  #       run: npm ci

  #     - name: Build frontend
  #       working-directory: ./frontend
  #       run: npm run build

  #     - name: Start backend server
  #       working-directory: ./backend
  #       run: |
  #         npm run build
  #         npm start &
  #       env:
  #         NODE_ENV: test
  #         DATABASE_URL: postgresql://test:test@localhost:5432/wizcuts_test
  #         CLERK_SECRET_KEY: test_key
  #         JWT_SECRET: test_jwt_secret
  #         PORT: 3001

  #     - name: Wait for backend to be ready
  #       run: |
  #         timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'

  #     - name: Start frontend server
  #       working-directory: ./frontend
  #       run: npm start &
  #       env:
  #         NEXT_PUBLIC_API_URL: http://localhost:3001
  #         NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: test_pk

  #     - name: Wait for frontend to be ready
  #       run: |
  #         timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

  #     - name: Install Playwright
  #       working-directory: ./frontend
  #       run: npx playwright install --with-deps

  #     - name: Run E2E tests
  #       working-directory: ./frontend
  #       run: npm run test:e2e
  #       env:
  #         PLAYWRIGHT_BASE_URL: http://localhost:3000

  #     - name: Upload E2E test results
  #       uses: actions/upload-artifact@v4
  #       if: failure()
  #       with:
  #         name: playwright-report
  #         path: ./frontend/playwright-report/
  #         retention-days: 30

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: ./frontend/coverage/

      - name: Download backend coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: ./backend/coverage/

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  security-scan:
    #   name: Security Scan
    #   runs-on: ubuntu-latest

    #   steps:
    #     - name: Checkout code
    #       uses: actions/checkout@v4

    #     - name: Run Trivy vulnerability scanner
    #       uses: aquasecurity/trivy-action@master
    #       with:
    #         scan-type: 'fs'
    #         scan-ref: '.'
    #         format: 'sarif'
    #         output: 'trivy-results.sarif'

    #     - name: Upload Trivy scan results
    #       uses: github/codeql-action/upload-sarif@v2
    #       if: always()
    #       with:
    #         sarif_file: 'trivy-results.sarif'
    name: Credentialss Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --results=verified,unknown

  #   deploy-staging:
  #     name: Deploy to Staging
  #     runs-on: ubuntu-latest
  #     needs: [frontend-test, backend-test, sonarcloud, security-scan]
  #     if: github.ref == 'refs/heads/develop'
  #     environment:
  #       name: staging
  #       url: https://wizcuts-staging.vercel.app

  #     steps:
  #       - name: Checkout code
  #         uses: actions/checkout@v4

  #       - name: Deploy to Vercel (Staging)
  #         uses: amondnet/vercel-action@v25
  #         with:
  #           vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #           vercel-args: '--prod'
  #           vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
  #           vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
  #           working-directory: ./frontend

  #   deploy-production:
  #     name: Deploy to Production
  #     runs-on: ubuntu-latest
  #     needs: [frontend-test, backend-test, sonarcloud, security-scan]
  #     if: github.ref == 'refs/heads/main'
  #     environment:
  #       name: production
  #       url: https://wizcuts.com

  #     steps:
  #       - name: Checkout code
  #         uses: actions/checkout@v4

  #       - name: Deploy to Vercel (Production)
  #         uses: amondnet/vercel-action@v25
  #         with:
  #           vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #           vercel-args: '--prod'
  #           vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
  #           vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
  #           working-directory: ./frontend
  # - Rolling updates
  # - Database migrations with rollback capability
  # - Health checks
  # - Notification to team

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Generate combined coverage report
        run: |
          echo "## ðŸ“Š Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Coverage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ![Frontend Coverage](https://codecov.io/gh/${{ github.repository }}/branch/main/graphs/badge.svg?flag=frontend) | âœ… |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ![Backend Coverage](https://codecov.io/gh/${{ github.repository }}/branch/main/graphs/badge.svg?flag=backend) | âœ… |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Coverage:** 80%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View detailed coverage report on Codecov](https://codecov.io/gh/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
